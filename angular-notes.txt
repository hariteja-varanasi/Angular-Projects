npm install npm -g

npm config set registry http://registry.npmjs.org

npm i -g @angular/cli@latest

npm cache clear --force

ng register

ng serve -o

ng new <app-name>

ng build

npm i bootstrap (i stands for install)

ng generate component components/bind

Directives
	-> Directives are classes that add additional behavior to elements in your applications.

TYPES OF DIRECTIVES
	1) Components
		-> This type of directive is the most common directive types.
		-> Run the ng generate component <component-name> command, where <component-name> is the name of your new component. 
		
	2) Attribute Directives
		-> Attribute directives that change the appearance or behavior of an element, component or another directive.
		
		Attribute Directives Types
		
		-> ngClass - adds or removes a set of CSS classes.
			Example <div [ngClass]="currentClasses">A Divider Tag with ngClass attribute directive</div>
			
		-> ngStyle - adds or removes a set of HTML styles.
			Example <div [ngStyle]="currentStyles">A Divider Tag with ngStyle attribute directive</div>
			
		-> ngModel - adds two-way data binding to an HTML form element.
			Example <input [(ngModel)]="currentItem.name" id="example-ngModel">
	
	3) Structural Directives
		-> directives that change the DOM layout by adding and removing DOM elements.
		
		Structural Directives Types
		
		-> ngIf - conditionally creates or disposes of subviews from the template.
		-> ngFor - repeat a node for each item in a list.
		-> ngSwitch - a set of directives that switch among alternative views.
		
	4) Custom Directives
		
		-> We create directives by annotating a class with the @Directive decorator.
		
Command to generate directives

		ng g d directive/simple-directive

PIPE
	-> Used to transform the DATA
	-> Pipes will take data input and convert/transform into a desired format.

TYPES OF PIPES
	1. Built-In pipe
	2. Parameterized pipe
	3. Chaining pipe
		-> we can connect multiple pipes to a data input
	4. Custom pipes

ng g p pipes/<pipename>

FORM
	
	1. Create form template
	2. Bind data with a model
	3. Perform Validation
	4. Provide visual feedback
	5. Display error messages
	6. Post the form data to a server
	7. Receive the response
	8. Handle any error from the server

	ANGULAR SUPPORT FOR FORMS
		1. Two way binding
		2. Change Tracking
		3. Validations
		4. Error Handling
		5. Unit Testing

	TYPES OF FORMS IN ANGULAR
		1. STATIC/TEMPLATE DRIVEN FORM
			- Easy to use
			- Simple and Straight forward
			- All the validations, form elements are all defined in the template file.
		2. DYNAMIC/REACTIVE FORM
			- All the form elements, user interactions and validations are 
			handled in the component class.
			- We will make use of Angular's built in formGroups and formControl
			- Can control better data binding
			- Exclusive defines custom regular expression patterns of error handling
			- We will need to import ReactFormsModule in our app module
			- Very flexible and allow users to define, develop complex requirements of forms
			- More login in the components class and less in HTML mark up itself.

		CREATE TWO COMPONENTS
			1. STATIC (FormsModule)
			2. DYNAMIC or REACTIVE FORM (ReactFormsModule)

		STATIC
		-> Complete the HTML code.

		-> ng g class classes/User (Creating new class file) and update it.

		-> Create an object of User class inside the static.component.ts file

TRACKING STATE AND VALIDITY (GO to the below table)
	======================================================================================
	STATE											CLASS IF TRUE			CLASS IF FALSE
	======================================================================================
	1) The control has been visited.				ng-touched				ng-untouched
	2) The control's value has changed.				ng-dirty				ng-pristine
	3) The control's value is valid.				ng-valid				ng-invalid

	ngModel Properties
	CLASS				Properties
	1) ng-touched		touched
	2) ng-untouched		untouched
	3) ng-pristine		pristine
	4) ng-dirty			dirty
	5) ng-valid			valid
	6) ng-invalid		invalid

CREATE A SERVER FOLDER INSIDE THE ANGULAR(PARENT) FOLDER

	-> cd to the server folder then run the following command
		npm init --yes

	-> npm install --save express body-parser cors

	-> CORS - Cross Origin Resource Sharing

	-> node server.js

CREATE A SERVICE

	-> Angular App needs a Service to communicate to the Server

	-> Command to create a Service
		ng g s services/enrollment
